use crate::explainer::extension::parse_extension;
use crate::{explainer::extension::Field, plugin::Plugin};
use gosyn::ast::Expression::TypeStruct;

#[derive(Default, Debug)]
pub struct Validate;

impl Validate {
    pub fn new() -> Validate {
        Validate::default()
    }
}

impl Plugin for Validate {
    fn name(&self) -> &'static str {
        "Validate"
    }

    fn header(&self, package_name: &str) -> String {
        let mut header = String::new();
        header.push_str("// Code generated by craft; DO NOT EDIT.\n\n");
        header.push_str(&format!("package {}\n\n", package_name));
        header
    }

    fn build(&self, ts: gosyn::ast::TypeSpec, args: Vec<Field>) -> String {
        println!("{:?}", ts);
        println!("{:?}", args);

        let ss = match ts.typ {
            TypeStruct(s) => s,
            _ => panic!("not support type"),
        };

        let struct_type_name = ts.name.name;
        ss.fields.iter().for_each(|f| {
            let comments = f
                .comments
                .iter()
                .map(|s| s.text.clone())
                .collect::<Vec<String>>()
                .join(" ");
            println!("{:?}\n", comments);
            let exs = parse_extension(comments);
            println!("{:?}", exs);
        });

        println!("{}", ss.fields.len());

        "".to_string()
    }
}
